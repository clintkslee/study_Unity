< 2D 오브젝트의 이동 >

    private void Awake()
    {
        //새로운 위치 = 현재 위치 + (방향 * 속도)
        transform.position = transform.position + new Vector3(1, 0, 0) * 1;
        // transform.position += Vector3.right * 1; //위와 동일
    }

이렇게 하면 오른쪽으로 1만큼 1번만 움직인다. Update()로 수정해보자.

***

Update() 는 FPS 수치에 영향을 받으므로, 이전 Update() 종료부터 다음 Update() 호출까지의 시간인 Time.deltaTime 값을 곱해준다.
즉, FPS가 60이면 Time.deltaTime 값은 1이 된다.

만약 두 컴퓨터 A, B가 각각 FPS 60, 120 일 때 Time.deltaTime을 사용하지 않는다면,
A : 1초에 update() 60번 호출 -> 초당 60 만큼 이동
B : 1초에 update() 120번 호출 -> 초당 120 만큼 이동 

이때, 각 경우에 Time.deltaTime 값을 곱해주면 (A : 1, B : 0.5)
A : 60 * 1 = 60
B : 120 * 0.5 = 60
FPS는 다르지만 같은 시간에 같은 거리를 가게 된다. (이동의 부드러움 차이 존재)

    private void Update()
    {
        //새로운 위치 = 현재 위치 + (방향 * 속도)
        transform.position += Vector3.right * 1 * Time.deltaTime;
    }

***

방향키 사용하여 이동

    private float moveSpeed = 5.0f;                 // 이동 속도
    private Vector3 moveDirection = Vector3.zero;   // 이동 방향
    private void Update()
    {
        // Negative left, a : -1
        // Positive right, d : +1
        // Non : 0
        float x = Input.GetAxisRaw("Horizontal");   // 좌우 이동 

        // Negative down, s : -1
        // Positive up, w : +1
        // Non : 0
        float y = Input.GetAxisRaw("Vertical");     // 상하 이동

        // 이동 방향 설정
        moveDirection = new Vector3(x, y, 0);

        //새로운 위치 = 현재 위치 + (방향 * 속도)
        transform.position += moveDirection * moveSpeed * Time.deltaTime;
    }

Input 클래스는 유니티의 입력(키보드, 마우스, 터치, 자이로센서 등) 관련 클래스
GetAxisRaw()는 유니티에 미리 설정된 단축키 이용에 사용되는 함수 (에디트 메뉴 - 프로젝트 세팅 - 인풋 매니저)
* GetAxisRaw()는 키 입력 시 바로 1 또는 -1 값이 되지만, GetAxis()는 키를 누르고 있으면 0에서 1, -1로 서서히 증가
(GetAxis()는 똥겜의 개같은 조작감이라고 생각하면 된다.)

지정된 단축키 입력 시 x, y 값에 1(또는 -1) 값이 저장
저장된 값으로 방향으로 사용
매 Update() 호출마다 새로운 위치로 이동된다










