<오브젝트 삭제>

Destroy() 함수
오브젝트 삭제 함수, 매개 변수로 받는 오브젝트, 컴포넌트를 삭제

    [SerializeField]
    private GameObject playerObject;

    private void Awake()
    {
        //플레이어 오브젝트의 PlayerController 컴포넌트 삭제      
        //Destroy(playerObject.GetComponent<PlayerController>());

	//실제 개발 시에는 컴포넌트 삭제보다는 컴포넌트 비활성화를 권장 
        //playerObject.GetComponent<PlayerController>().enabled = false;

        // 플레이어 오브젝트 삭제
        //Destroy(playerObject);

	//Destroy(GameObject, time); 게임 오브젝트를 time 시간만큼 흐른 후 삭제 (time은 실수 초)
	//2초 후 플레이어 오브젝트 삭제
        //Destroy(playerObject, 2.0f);
    }


*** 정해진 위치를 벗어난 오브젝트 삭제

    private Vector2 limitMin = new Vector2(-7.5f, -4.5f);
    private Vector2 limitMax = new Vector2(7.5f, 4.5f);

    private void Update()
    {
        if (transform.position.x < limitMin.x || transform.position.x > limitMax.x ||
            transform.position.y < limitMin.y || transform.position.y > limitMax.y)

            // 소문자 gameObject는 해당 컴포넌트가 소속된 게임오브젝트 의미
            Destroy(gameObject);
    }


*** 충돌 시 삭제되는 오브젝트 구현
wall 오브젝트 생성
- Rigidbody 2D (gravity scale = 0)
- Box Collider 2D (onTriggerEnter() 호출 위해 is Trigger 체크)
- 플레이어의 총알로 사용되는 prefab에 box collider 추가

- 벽에 등록될 스크립트
    private SpriteRenderer spriteRenderer;

    private void Awake()
    {
        spriteRenderer = GetComponent<SpriteRenderer>();
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        // 벽에 부딪힌 오브젝트 삭제
        Destroy(collision.gameObject);
        // 충돌 시 벽면 색 잠깐 변경 (매개변수 함수명)
        StartCoroutine("HitAnimation");
    }

    private IEnumerator HitAnimation()
    {
        spriteRenderer.color = Color.red;
        yield return new WaitForSeconds(0.1f);
        spriteRenderer.color = Color.white;
    }